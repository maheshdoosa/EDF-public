trigger: none

variables:
- group: 'IaC_General'
- name: SourceRepositoryName
  value: Azure_DNS 
  readonly: true

stages:
- stage: Validation
  displayName: Validation Terraform configuration
  jobs:
  - job: InfracostComment
    displayName: Generating costs estimate
    pool: 'linux_pba'
    steps:

    - checkout: 'git://$(System.TeamProject)/${{ variables.SourceRepositoryName }}@$(System.PullRequest.SourceBranch)'
      clean: true
      persistCredentials: true
      displayName: 'Checkout Pull request source branch'
    
    - checkout: 'git://$(System.TeamProject)/${{ variables.SourceRepositoryName }}@$(System.PullRequest.TargetBranch)'
      clean: true
      persistCredentials: true
      displayName: 'Checkout Pull request target branch'

    - script: 
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
      displayName: 'Install infracost'

    - script: 
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }};
        git checkout $(echo $(System.PullRequest.SourceBranch) | cut -d / -f3,4);
        git pull
      displayName: 'Checkout source branch'

    - script: 
        sudo apt update
      displayName: 'Update package reference'   

    - script:     
        if ! [[ $(which terraform) ]]; then
          echo "Terraform not installed";
          sudo snap install terraform --classic;
        fi
      displayName: 'Check and install Terraform' 

    - script: |
        if ! [[ $(which zip) ]]; then
          echo "Zip not installed"
          sudo apt install zip -y
        fi
      displayName: 'Check and install Zip' 

    - script: |
        if ! [[ $(which jq) ]]; then 
          sudo apt-get install jq -y;  
        fi
      displayName: 'Check and install jq'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: Install latest version of Terraform
      inputs:
        terraformVersion: 'latest' 
    
    - task: TerraformCLI@0
      displayName: Terraform init
      inputs:
        command: 'init'
        workingDirectory: '$(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env'
        backendType: 'azurerm'
        backendServiceArm: 'sc-pf-sub-cpl-mg'
        backendAzureRmSubscriptionId: $(subscription_id)
        backendAzureRmResourceGroupName: $(resource_group_name)
        backendAzureRmStorageAccountName: $(storage_account_name)
        backendAzureRmContainerName: $(container_name)
        backendAzureRmKey: 'azure_dns.tfstate'
        allowTelemetryCollection: false

    # - script: 
    #     cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env;
    #     terraform fmt -recursive -list=false -diff -check;
    #   displayName: 'Terraform fmt'

    - script: |
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env
        if [[ $(terraform workspace list | grep $(System.PullRequest.PullRequestId)) ]]; then 
          terraform workspace delete -force $(System.PullRequest.PullRequestId)
        fi
      displayName: 'Delete existing temporary workspace'

    - script: |
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env
        terraform state pull > $(Agent.TempDirectory)/azure_dns.tfstate
        terraform workspace new -state=$(Agent.TempDirectory)/azure_dns.tfstate $(System.PullRequest.PullRequestId)
      displayName: 'Create temporary workspace'

    - task: TerraformCLI@0
      displayName: Generate Terraform plan
      inputs:
        command: 'plan'
        workingDirectory: '$(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env'
        environmentServiceName: 'sc-pf-sub-cpl-id'
        commandOptions: '-out tf.tfplan'
        allowTelemetryCollection: false
        publishPlanResults: 'Terraform Plan'

    - script: |
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env
        terraform show -no-color tf.tfplan > $(Agent.TempDirectory)/tf.txt
      displayName: Convert Terraform plan to text

    - bash: |
        cd $(Agent.TempDirectory)
        ENCODED_URL=$(echo "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/${{ variables.SourceRepositoryName }}/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.0" | sed 's/ /%20/g')
        jq --rawfile comment tf.txt '.comments[0].content=$comment' <<< '{"comments": [{"parentCommentId": 0,"content": "","commentType": 1}],"status": 1}' | 
        curl --request POST "$ENCODED_URL" \
        --header "Content-Type: application/json" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        --data @- \
        --verbose
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      displayName: 'Run using bach instead of script'
    
    - task: TerraformCLI@0
      displayName: Terraform validate
      inputs:
        command: 'validate'
        workingDirectory: '$(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env'
        allowTelemetryCollection: false

    - script: |
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/env
        terraform workspace select default
        terraform workspace delete -force $(System.PullRequest.PullRequestId)
      displayName: 'Select Default and delete temporary workspace'

    - script: 
        infracost breakdown --path $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/modules/core_module --format json --out-file infracost-base.json
      displayName: 'Generate Infracost JSON files as the baseline'
      env:
        INFRACOST_API_KEY: $(infracost_api_key)
        INFRACOST_CURRENCY: EUR

    - script: 
        cd $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }};
        git checkout $(echo $(System.PullRequest.TargetBranch) | cut -d / -f3,4);
        git pull
      displayName: 'Checkout target branch'

    - script: 
        infracost diff --path $(Build.SourcesDirectory)/${{ variables.SourceRepositoryName }}/${{ variables.SourceRepositoryName }}/modules/core_module --format json --compare-to infracost-base.json --out-file infracost-report.json
      displayName: 'Generate a diff by comparing the latest code change with the baselines'
      env:
        INFRACOST_API_KEY: $(infracost_api_key)
        INFRACOST_CURRENCY: EUR

    - bash: |
        TEMP_SOURCE_REPOSITORY_URI=$(echo "$(System.CollectionUri)$(System.TeamProject)/_git/${{ variables.SourceRepositoryName }}" | sed 's/ /%20/g')
        infracost comment azure-repos --path=infracost-report.json --repo-url=$TEMP_SOURCE_REPOSITORY_URI  --pull-request=$(System.PullRequest.PullRequestId) --azure-access-token=$(System.AccessToken) --behavior=update
      displayName: 'Post one comment with above Infracost JSON files'
      env:
        INFRACOST_API_KEY: $(infracost_api_key)
        INFRACOST_CURRENCY: EUR
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)