parameters:
  - name: teardownJobName
    default: ""
    type: string

  - name: teardownEnvironment
    default: false
    type: boolean

  - name: serviceConnectionName
    default: ""
    type: string

  - name: tfStateResourceGroupName
    default: ""
    type: string

  - name: tfStateStorageAccountName
    default: ""
    type: string

  - name: tfStateContainerName
    default: ""
    type: string

  - name: tfStateFile
    default: ""
    type: string

  - name: tfWorkingFolder
    default: ""
    type: string

  - name: envConfiguration
    default: ""
    type: string

  - name: enableApply
    default: false
    type: boolean

  - name: stageName
    default: ""
    type: string

  - name: agentPool
    default: ""
    type: string

  - name: deploymentJobName
    default: ""
    type: string

  - name: environment
    default: ""
    type: string

  - name: branchName
    default: ""
    type: string

  - name: enable
    default: true

  - name: enable_import
    default: false
    type: boolean

  - name: import_module_name
    default: ""
    type: string

  - name: ResourceID
    default: ""
    type: string
# The following mapping contains the same key twice,
# but I know what I'm doing:
stages:
  - stage: ${{ parameters.stageName }}
    condition: always()
    displayName: ${{ parameters.stageName }}
    pool: ${{ parameters.agentPool }}
    jobs:
      - job: ${{ parameters.teardownJobName }}
       # condition: and(eq(variables['build.sourceBranch'], 'refs/heads/production-hs'), eq('${{ parameters.teardownEnvironment }}', true), eq('${{ parameters.enable }}', true))
        condition: and(eq(variables['build.sourceBranch'], '${{ parameters.branchName }}'), eq('${{ parameters.teardownEnvironment }}', true), eq('${{ parameters.enable }}', true))
        steps:
          - template: tf-tasks-common.yml
            parameters:
              serviceConnectionName: ${{ parameters.serviceConnectionName }}
              tfStateResourceGroupName: ${{ parameters.tfStateResourceGroupName }}
              tfStateStorageAccountName: ${{ parameters.tfStateStorageAccountName }}
              tfStateContainerName: ${{ parameters.tfStateContainerName }}
              tfStateFile: ${{ parameters.tfStateFile }}
              tfWorkingFolder: ${{ parameters.tfWorkingFolder }}
              envConfiguration: ${{ parameters.envConfiguration }}
              teardownEnvironment: ${{ parameters.teardownEnvironment }}
          - task: TerraformTaskV1@0
            displayName: "Remove Infrastructure"
            inputs:
              provider: "azurerm"
              command: "destroy"
              environmentServiceNameAzureRM: ${{ parameters.serviceConnectionName }}
              workingDirectory: ${{ parameters.tfWorkingFolder }}
              commandOptions: '--auto-approve -var-file="${{ parameters.envConfiguration }}"'
      - job: ${{ parameters.deploymentJobName }}
        #condition: and(eq(variables['build.sourceBranch'], 'refs/heads/production-hs'), eq('${{ parameters.teardownEnvironment }}', false), eq('${{ parameters.enable }}', true))
        condition: and(eq(variables['build.sourceBranch'], '${{ parameters.branchName }}'), eq('${{ parameters.teardownEnvironment }}', false), eq('${{ parameters.enable }}', true))
        steps:
          - template: tf-tasks-common.yml
            parameters:
              serviceConnectionName: ${{ parameters.serviceConnectionName }}
              tfStateResourceGroupName: ${{ parameters.tfStateResourceGroupName }}
              tfStateStorageAccountName: ${{ parameters.tfStateStorageAccountName }}
              tfStateContainerName: ${{ parameters.tfStateContainerName }}
              tfStateFile: ${{ parameters.tfStateFile }}
              tfWorkingFolder: ${{ parameters.tfWorkingFolder }}
              envConfiguration: ${{ parameters.envConfiguration }}
              teardownEnvironment: ${{ parameters.teardownEnvironment }}
              enable_import: ${{ parameters.enable_import }}
              import_module_name: ${{ parameters.import_module_name }}
              ResourceID: ${{ parameters.ResourceID }}
          - task: TerraformTaskV1@0
            displayName: "Deploy Infrastructure"
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceNameAzureRM: ${{ parameters.serviceConnectionName }}
              workingDirectory: ${{ parameters.tfWorkingFolder }}
              commandOptions: '--auto-approve -var-file="${{ parameters.envConfiguration }}"'
            enabled: ${{ parameters.enableApply }}
